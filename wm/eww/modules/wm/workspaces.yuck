(defvar wm-state "[]")
(defvar reveal-layout false)

(defwidget screen []
    (label))

(defwidget workspaces [?screen]
    (box 
        :class 
            'workspaces
            ${theme}'
        :orientation 'horizontal'
        :space-evenly false
        :spacing 3
        ;; :halign 'start'
        (for workspace in '${wm-state}'
            (button 
                :class 
                    'workspace-button 
                    workspace-button-${workspace.name} 
                    ${workspace.screen != "null" ? "workspace-button-active-${workspace.screen}" : ""} 
                    ${workspace.active == "true" ? "workspace-button-active" : ""} 
                    ${workspace.screen == "0" ? "workspace-button-active-primary" : ""} 
                    ${workspace.screen == "1" ? "workspace-button-active-secondary" : ""} 
                    ${workspace.screen == "2" ? "workspace-button-active-tertiary" : ""} 
                    ${workspace.open_window == "true" ? "workspace-button-window-open" : ""}
                    ${theme}'
                :tooltip '${workspace.name}'
                :onclick '$HOME/.config/eww/scripts/wm qtile togroup ${workspace.name}'
                '${workspace.icon}'))))

(defwidget layouts-widget [screen]
    (eventbox 
        :class "layouts-widget" 
        :onhover "/opt/eww update reveal-layout=true" 
        :onhoverlost "/opt/eww update reveal-layout=false" 
        (box :class "active-layout" :space-evenly false 
            (label :class "active-layout active-layout-icon"
                   :text {replace(jq(wm-state, ".[] | select(.active == true) | select(.screen == ${screen}) | .layout_icon"), '\"', '')}
                   :tooltip {replace(jq(wm-state, ".[] | select(.active == true) | select(.screen == ${screen}) | .layout"), '\"', '')})
            (revealer :transition "slideright" :duration "600ms" :reveal reveal-layout 
                (box :class "available-layout-box"
                    (for layout in {jq(wm-state, ".[] | select(.active == true) | select(.screen == ${screen}) | .layouts")} 
                    (button 
                        :class "available-layout-button"
                        :tooltip "${layout.name}"
                        :onclick ""
                        "${layout.icon}")))))))

(defwidget windows-widget [screen]
    (box))

